;nasm 2.13.02
;Name: Jack Muir, ID: 900783742
;Given three numbers, multiply the first two, then divide by the third. Print the two digit answer
;input format example
;9 3 4
section .data ;constants
    
section .bss ;variables

    firstNum resb 2   ;reserve 2 bytes for the first number
    secondNum resb 2  ;reserve 2 bytes for the second number
    thirdNum resb 2   ;reserve 2 bytes for the third number
    multResult resb 2  ;reserve 2 bytes for the multiplication result
    result resb 2     ;reserve 2 bytes for the result number
    
    tensdig resb 2 ;reserve 2 bytes for the display of the tens digit
    onesdig resb 2 ;reserve 2 bytes for the display of the ones digit
    
    
    space resb 1      ;reserve 1 byte for the space character to be stored between numbers

    
section .text ;Code

	global _start ;start of instruction

_start: ;instruction

    ;read space
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, space       ; Put the space characters before nums into space variable
	mov edx, 1           ; Store 1 byte of characters from the space
    int 0x80             ; call kernel
    
    ;read firstNum
	mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, firstNum    ; Put the offset of the input into firstNum
	mov edx, 2           ; Store 2 bytes of firstNum
    int 80h              ; call kernel
    
    ;read secondNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,secondNum    ; Put the offset of input into secondNum
	mov edx, 2           ; Store 2 bytes of character from secondNum
    int 0x80             ; call kernel
    
    ;read thirdNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,thirdNum     ; Put the offset of input into thirdNum
	mov edx, 1           ; Store 1 byte of character from thirdNum
    int 0x80             ; call kernel
    

    ;Turn input into regular numbers as opposed to ascii
    sub [firstNum], word '0'
    sub [secondNum], word '0'
    sub [thirdNum], word '0'
    
    ;arithmetic
    
    ;multiplication
    mov al, [firstNum]  
    mov bl, [secondNum]
    mul bl
    mov [multResult], al

    ;clear registers for division
    mov dx, 0
    mov ah, 0
    
    ;division
    mov al, [multResult]
    mov bl, [thirdNum]
    div bl
    mov [result], al
    
    ;divide result by 10 for digit display
    mov ax, 0
    mov ax, [result]
    mov bx, 10
    div bx
    
    ;place digits in variables
    mov [tensdig], ax
    mov [onesdig], dx
    
    ;return digits to ascii
    add [tensdig], word '0'
    add [onesdig], word '0'
    
    
   ;write the result
    mov eax,4            ; The system call for write (sys_write)
	mov ebx,1            ; File descriptor 1 - standard output
	mov ecx, tensdig      ; Put the offset of tensdig in ecx
	mov edx, 2           ; Only using two bytes of memory for tensdig
	int 0x80             ; call kernel

    ;write the result
    mov eax,4            ; The system call for write (sys_write)
	mov ebx,1            ; File descriptor 1 - standard output
	mov ecx, onesdig      ; Put the offset of onesdig in ecx
	mov edx, 2          ; Only using two bytes of memory for onesdig
	int 0x80    
    
    ;System Exit
	mov eax,1            ; The system call for exit (sys_exit)
	mov ebx,0            ; Exit with return code of 0 (no error)
	int 80h;
