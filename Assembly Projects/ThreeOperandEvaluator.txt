;nasm 2.13.02
;Name: Jack Muir, ID: 900783742
;Given an expression with three operands, evaluate the answer. Uses two lines for two expressions
;Input format example
;3+4-5
section .data ;constants

    newLine: db 10 ;newline constant to skip lines in output
    
section .bss ;variables

    firstNum resb 1   ;reserve 1 byte for the first number
    secondNum resb 1  ;reserve 1 byte for the second number
    thirdNum resb 1   ;reserve 1 byte for the third number
    result resb 1     ;reserve 1 byte for the result number
    
    space resb 1      ;reserve 1 byte for the space character to be stored between numbers
    skipLine resb 2   ;reserve 2 bytes for the newline character to be stored between phrases
    
section .text ;Code

	global _start ;start of instruction

_start: ;instruction


    ;read firstNum
	mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, firstNum    ; Put the offset of the input into firstNum
	mov edx, 1           ; Store 1 byte of firstNum
    int 80h              ; call kernel

    ;read space
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, space       ; Put the space character between nums into space variable
	mov edx, 1           ; Store one byte of characters from the space
    int 0x80             ; call kernel
    
    ;read secondNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,secondNum    ; Put the offset of input into secondNum
	mov edx, 1           ; Store 1 byte of character from secondNum
    int 0x80             ; call kernel

    ;read space
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, space       ; Put the space character between nums into space variable
	mov edx, 1           ; Store one byte of characters from the space
    int 0x80             ; call kernel
    
    ;read thirdNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,thirdNum     ; Put the offset of input into thirdNum
	mov edx, 1           ; Store 1 byte of character from thirdNum
    int 0x80             ; call kernel
    
    ;arithmetic
    mov al, [firstNum]   ; move the data of the first input into al
    sub al, 48           ; subtract 48 from al to get non ascii number rep
    add al, [secondNum]  ; add second input to first input in al
    sub al, 48           ; subtract 48 from al to get non ascii rep
    sub al, [thirdNum]   ; subtract thrid input from total in al
    add al, 96           ; add 96 from al, 48 to make up for subtraction of ascii value, 48 to return to printable ascii
    mov [result], al     ; move final term into a result variable to print

   ;write the result
    mov eax,4            ; The system call for write (sys_write)
	mov ebx,1            ; File descriptor 1 - standard output
	mov ecx, result      ; Put the offset of result in ecx
	mov edx, 1           ; Only using one byte of memory for result
	int 0x80             ; call kernel

    ;skip a line
    mov eax, 4           ; The system call for write (sys_write)
    mov ebx, 1           ; File descriptor 1 - standard output
    mov ecx, newLine     ; Print a newline to separate result output
    mov edx, 1           ; Only using one byte of memory for newline
    int 0x80             ; call kernel

    ;read skip a line of input
    mov eax, 3           ; The system call for read
    mov ebx, 0           ; File descriptor 0 - standard for input
    mov ecx, skipLine    ; store offset of input into  skipline
    mov edx, 2           ; store 2 bytes of skipped line
    int 0x80             ; call kernel

    ;read firstNum
	mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, firstNum    ; Put the offset of the input into firstNum
	mov edx, 1           ; Store 1 byte of firsNum
    int 80h              ; call kernel

    ;read space
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, space       ; Put the space character between nums into space variable
	mov edx, 1           ; Store one byte of characters from the space
    int 0x80             ; call kernel
    
    ;read secondNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,secondNum    ; Put the offset of input into secondNum
	mov edx, 1           ; Store 1 byte of character from secondNum
    int 0x80             ; call kernel

    ;read space
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, space       ; Put the space character between nums into space variable
	mov edx, 1           ; Store one byte of characters from the space
    int 0x80             ; call kernel
    
    ;read thirdNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,thirdNum     ; Put the offset of input into thirdNum
	mov edx, 1           ; Store 1 byte of character from thirdNum
    int 0x80             ; call kernel
    
    ;Arithematic
    mov al, [firstNum]   ; move the data of the first input into al
    sub al, 48           ; subtract 48 from al to get non ascii number rep
    add al, [secondNum]  ; add second input to first input in al
    sub al, 48           ; subtract 48 from al to get non ascii rep
    sub al, [thirdNum]   ; subtract third input from total in al
    add al, 96           ; add 96 from al, 48 to make up for subtraction of ascii value, 48 to return to printable ascii
    mov [result], al     ; move final term into a result variable to print

    ;write the result
    mov eax,4            ; The system call for write (sys_write)
	mov ebx,1            ; File descriptor 1 - standard output
	mov ecx, result      ; Put the offset of result in ecx
	mov edx, 1           ; Only using one byte of memory for result
	int 0x80             ; call kernel   
    
    ;System Exit
	mov eax,1            ; The system call for exit (sys_exit)
	mov ebx,0            ; Exit with return code of 0 (no error)
	int 80h;

