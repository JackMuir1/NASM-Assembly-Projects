;nasm 2.13.02
;Name: Jack Muir, ID: 900783742
;Given two lines of two single digit-operand equations of any operation type, evaluate both equations
;input format example 
;1 / 3
;3 * 2
section .data ;constants

    error db 'Invalid Operator' ;used to display error messages
    elength equ $ - error ;length of error message
    
    rText db 'r' ;used to proceed remainder
    rLength equ $ - rText ;length of rText
    
    newline db 10
    
section .bss ;variables

    firstNum resb 2   ;reserve 2 bytes for the first number
    secondNum resb 2  ;reserve 2 bytes for the second number
    op resb 2   ;reserve 2 bytes for the operator
    result resb 2     ;reserve 2 bytes for the result number  
    remainder resb 2 ; reserve 2 bytes for the remainder in division
    
    space resb 1      ;reserve 1 byte for the space character to be stored between numbers
    newspace resb 2   ;reserve 2 bytes for the newline character to be stored between numbers
    
section .text ;Code

	global _start ;start of instruction

_start: ;instruction

    ;read space
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, space       ; Put the offset of input into thirdNum
	mov edx, 1           ; Store 1 byte of character from thirdNum
    int 0x80  
    
    ;read firstNum
	mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, firstNum    ; Put the offset of the input into firstNum
	mov edx, 2           ; Store 2 bytes of firstNum
    int 80h              ; call kernel
    
    ;read operator
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, op          ; Put the offset of input into op
	mov edx, 2           ; Store 2 bytes of character from op
    int 0x80    
    
    ;read secondNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,secondNum    ; Put the offset of input into secondNum
	mov edx, 1           ; Store 1 byte of character from secondNum
    int 0x80             ; call kernel
    
    mov ah, [op] ;move operator to ah for comparison
    
    ;check for addition
    cmp ah, 43
    je add
    
    ;check for subtraction
    cmp ah, 45
    je subtract
    
    ;check for multiplication
    cmp ah, 42
    je multiply
    
    ;check for division
    cmp ah, 47
    je divide

    ;write the error if no checks pass
    mov eax,4            ; The system call for write (sys_write)
	mov ebx,1            ; File descriptor 1 - standard output
	mov ecx, error      ; Put the offset of error in ecx
	mov edx, elength          ; Use length of error
	int 0x80             ;call kernel
    
    ;to be run for the second line of input
secondTime:
    
    ;read newline
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, newspace     ; Put the offset of input into newline
	mov edx, 2           ; Store 2 bytes of characters from newline
    int 0x80             ;call kernel
    
    ;read space
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, space       ; Put the offset of input into space
	mov edx, 1           ; Store 1 byte of character from space
    int 0x80  
    
    ;read firstNum
	mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, firstNum    ; Put the offset of the input into firstNum
	mov edx, 2           ; Store 2 bytes of firstNum
    int 80h              ; call kernel
    
     ;read operator
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx, op          ; Put the offset of input into op
	mov edx, 2           ; Store 1 byte of character from op
    int 0x80             ;call kernel
    
    
    ;read secondNum
    mov eax,3            ; The system call for read
	mov ebx,0            ; File descriptor 0 - standard for input
	mov ecx,secondNum    ; Put the offset of input into secondNum
	mov edx, 1           ; Store 1 byte of character from secondNum
    int 0x80             ; call kernel
    
    ;write newline
    mov eax, 4          ;the system call for write
    mov ebx, 1          ;file descriptor 1- standard for write
    mov ecx, newline    ;put newline constant
    mov edx, 1          ;use 1 byte
    int 0x80            ;call kernel
    
    mov ah, [op] ;move operator to ah for comparison
    
    ;check for addition
    cmp ah, 43
    je add2
    
    ;check for subtraction
    cmp ah, 45
    je subtract2
    
    ;check for multiplication
    cmp ah, 42
    je multiply2
    
    ;check for division
    cmp ah, 47
    je divide2

    ;write the error if no checks pass
    mov eax,4            ; The system call for write (sys_write)
	mov ebx,1            ; File descriptor 1 - standard output
	mov ecx, error       ; Put the offset of error in ecx
	mov edx, elength     ; Use length of error
	int 0x80  
    
    jmp exit ;jump to program exit function

add: 
    ;place input into arithmetic memory
    mov al, [firstNum]
    mov  bl, [secondNum]

    ; Convert from ascii to decimal
    sub al, '0'
    sub bl, '0'

    ; Add
    add al, bl

    ; Conversion from decimal to ascii
    add al, '0'

    ;place memory into result
    mov [result], al

    ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 2       ; Use length of error
    int 80h          ;call kernel

    ;move the program to second line

    jmp secondTime

subtract:

    ;place input into arithmetic memory
    mov al, [firstNum]
    mov bl, [secondNum]

    ; Convert from ascii to decimal
    sub al, '0'
    sub bl, '0'

    ; Subtract
    sub al, bl

    ; Conversion from decimal to ascii
    add al, '0'

    ;place memory into result
    mov [result], al


    ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 2       ; Use length of error
    int 80h          ;call kernel

    ;move the program to second line
    jmp secondTime

multiply:

    ;place input into arithmetic memory
    mov al, [firstNum]
    mov bl, [secondNum]

    ; Convert from ascii to decimal
    sub al, '0'
    sub bl, '0'

    ; Multiply. AX = AL x BL
    mul bl

    ; Conversion from decimal to ascii
    add ax, '0'

    ;place memory into result
    mov [result], ax

    ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 2       ; Use length of error
    int 80h          ;call kernel

    ;move the program to second line
    jmp secondTime
    
divide:

    ;place input into arithmetic memory
    mov al, [firstNum]
    mov bl, [secondNum]

    mov dx, 0
    mov ah, 0

    ; Convert from ascii to decimall
    sub al, '0'
    sub bl, '0'

    ; Division. AL = AX / BX
    div bl

    ; Conversion from decimal to ascii for both quotient and remainder
    add al, '0'
    add ah, '0'
    
    ;place memory into result and remainder
    mov [result], al
    mov [remainder], ah

   ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 1       ; Use length of error
    int 80h          ;call kernel
    
    ;write r text
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, rText  ; Put the offset of rText in ecx
    mov edx, rLength       ; Use length of rText
    int 80h          ;call kernel
    
    ;write remainder
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, remainder  ; Put the offset of remainder in ecx
    mov edx, 1       ; Use length of remainder
    int 80h          ;call kernel

    ;move the program to second line
    jmp secondTime

add2: 
    ;place input into arithmetic memory
    mov al, [firstNum]
    mov  bl, [secondNum]

    ; Convert from ascii to decimal
    sub al, '0'
    sub bl, '0'

    ; Add
    add al, bl

    ; Conversion from decimal to ascii
    add al, '0'

    ;place memory into result
    mov [result], al

    ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 2       ; Use length of error
    int 80h          ;call kernel

    ;move the program to exit function

    jmp exit

subtract2:

    ;place input into arithmetic memory
    mov al, [firstNum]
    mov bl, [secondNum]

    ; Convert from ascii to decimal
    sub al, '0'
    sub bl, '0'

    ; Subtract
    sub al, bl

    ; Conversion from decimal to ascii
    add al, '0'

    ;place memory into result
    mov [result], al


    ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 2       ; Use length of error
    int 80h          ;call kernel

    ;move the program to exit function
    jmp exit

multiply2:

    ;place input into arithmetic memory
    mov al, [firstNum]
    mov bl, [secondNum]

    ; Convert from ascii to decimal
    sub al, '0'
    sub bl, '0'

    ; Multiply. AX = AL x BL
    mul bl

    ; Conversion from decimal to ascii
    add ax, '0'

    ;place memory into result
    mov [result], ax

    ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 2       ; Use length of error
    int 80h          ;call kernel

    ;move the program to exit function
    jmp exit
    
divide2:

    ;place input into arithmetic memory
    mov al, [firstNum]
    mov bl, [secondNum]

    mov dx, 0
    mov ah, 0

    ; Convert from ascii to decimall
    sub al, '0'
    sub bl, '0'

    ; Division. AL = AX / BX
    div bl

    ; Conversion from decimal to ascii for both quotient and remainder
    add al, '0'
    add ah, '0'
    
    ;place memory into result and remainder
    mov [result], al
    mov [remainder], ah

   ;write result
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, result  ; Put the offset of result in ecx
    mov edx, 1       ; Use length of error
    int 80h          ;call kernel
    
    ;write r text
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, rText  ; Put the offset of rText in ecx
    mov edx, rLength       ; Use length of rText
    int 80h          ;call kernel
    
    ;write remainder
    mov eax, 4       ;the system call for write
    mov ebx, 1       ; File descriptor 1 - standard output
    mov ecx, remainder  ; Put the offset of remainder in ecx
    mov edx, 1       ; Use length of remainder
    int 80h          ;call kernel

    ;move the program to exit function
    jmp exit

    
    
exit:
    ;System Exit
	mov eax,1            ; The system call for exit (sys_exit)
	mov ebx,0            ; Exit with return code of 0 (no error)
	int 80h;